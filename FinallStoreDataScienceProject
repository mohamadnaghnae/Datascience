{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a05e9350",
   "metadata": {
    "papermill": {
     "duration": 0.007183,
     "end_time": "2025-05-04T06:57:47.675092",
     "exception": false,
     "start_time": "2025-05-04T06:57:47.667909",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Final Challenge: Dive into Data Science with Python  \n",
    "\n",
    "Here's a practical project to evaluate your skills in Python programming, data manipulation with Pandas, data visualization with Matplotlib and Seaborn, and basic data analysis. The project is divided into multiple sections and includes questions of increasing complexity.  \n",
    "\n",
    "> *The optional advanced sections and bonus challenges can be used to challenge more advanced students.*\n",
    "\n",
    "\n",
    "#### Section 1: Data Loading and Exploration\n",
    "\n",
    "1. Load the \"Stores.csv\" dataset using Pandas.  \n",
    " (Find this dataset in [Dayche kaggle's profile](https://www.kaggle.com/datasets/rouzbeh/stores-dataset))  \n",
    " \n",
    "2. Check data types for all features.  \n",
    "\n",
    "3. Display the first few rows of the dataset to get an overview.  \n",
    "  \n",
    "4. Describe the basic statistics of all qualitative an quantitative columns.  \n",
    "\n",
    "Write your interpretation of the obtained outputs in terms of analysis and preparation actions.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8c65126",
   "metadata": {
    "papermill": {
     "duration": 0.006801,
     "end_time": "2025-05-04T06:57:47.688970",
     "exception": false,
     "start_time": "2025-05-04T06:57:47.682169",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "بخش ۱: بارگذاری و کاوش داده‌ها\n",
    "\n",
    "1.مجموعه داده‌ی \"Stores.csv\" را با استفاده از پنداز بارگذاری کنید. (این مجموعه داده را در پروفایل دایکه در کگل پیدا کنید)\n",
    "\n",
    "2.نوع داده‌ها را برای تمام ویژگی‌ها بررسی کنید.\n",
    "\n",
    "3.چند ردیف اول مجموعه داده را نمایش دهید تا نمای کلی از آن بدست آورید.\n",
    "\n",
    "4.آمارهای پایه‌ی تمام ستون‌های کیفی و کمی را توصیف کنید.\n",
    "\n",
    "تفسیر خود از خروجی‌های به دست آمده را در مورد تجزیه و تحلیل و اقدامات آماده‌سازی بنویسی"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3a8b1164",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T06:57:47.705098Z",
     "iopub.status.busy": "2025-05-04T06:57:47.704678Z",
     "iopub.status.idle": "2025-05-04T06:57:48.806775Z",
     "shell.execute_reply": "2025-05-04T06:57:48.805491Z"
    },
    "papermill": {
     "duration": 1.113144,
     "end_time": "2025-05-04T06:57:48.809442",
     "exception": false,
     "start_time": "2025-05-04T06:57:47.696298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "برسی نوع و اطلاعات در مورد داده ها\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 118 entries, 0 to 117\n",
      "Data columns (total 7 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   Store Number     118 non-null    int64  \n",
      " 1   AreaStore        118 non-null    float64\n",
      " 2   Property         118 non-null    object \n",
      " 3   Type             118 non-null    object \n",
      " 4   Old/New          118 non-null    object \n",
      " 5   Checkout Number  106 non-null    float64\n",
      " 6   Revenue          118 non-null    object \n",
      "dtypes: float64(2), int64(1), object(4)\n",
      "memory usage: 6.6+ KB\n",
      "None\n",
      "نمایش چند ردیف اول  داده ها\n",
      "   Store Number  AreaStore   Property     Type Old/New  Checkout Number  \\\n",
      "0             1     2100.0      Owned    Hyper     New              6.0   \n",
      "1             2     1290.0  Cooperate    Extra     New              5.0   \n",
      "2             3      500.0     Rental  Express     New              NaN   \n",
      "3             4     2000.0      Owned    Hyper     New              9.0   \n",
      "4             5      220.0     Rental  Express     Old              2.0   \n",
      "\n",
      "      Revenue  \n",
      "0  45,072,000  \n",
      "1   7,416,000  \n",
      "2   8,592,000  \n",
      "3  48,415,500  \n",
      "4   3,345,500  \n",
      "امار های پایه تمام ستون ها\n",
      "       Store Number    AreaStore  Checkout Number\n",
      "count    118.000000   118.000000       106.000000\n",
      "mean      59.500000  1373.608136         4.792453\n",
      "std       34.207699  1092.453470         2.820729\n",
      "min        1.000000    82.000000         1.000000\n",
      "25%       30.250000   530.500000         3.000000\n",
      "50%       59.500000  1000.000000         4.000000\n",
      "75%       88.750000  1887.500000         6.000000\n",
      "max      118.000000  5600.000000        14.000000\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv('/kaggle/input/stores-dataset/Stores.csv')\n",
    "\n",
    "#  بررسی نوع و اطلاعاتی در مورد داده ها\n",
    "print(\"برسی نوع و اطلاعات در مورد داده ها\")\n",
    "print(df.info())\n",
    "\n",
    "#نماش چند ردیف اول داده ها \n",
    "print('نمایش چند ردیف اول  داده ها')\n",
    "print(df.head())\n",
    "\n",
    "# آمارهای پایه‌ی تمام ستون‌ها\n",
    "print(\"امار های پایه تمام ستون ها\")\n",
    "print(df.describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29773411",
   "metadata": {
    "papermill": {
     "duration": 0.00831,
     "end_time": "2025-05-04T06:57:48.826391",
     "exception": false,
     "start_time": "2025-05-04T06:57:48.818081",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "اقدامات پیشنهادی¶\n",
    "تبدیل ستون Store Number به نوع int16\n",
    "\n",
    "تبدیل ستون‌های AreaStore و Checkout Number به نوع بهینه‌تر:\n",
    "\n",
    "چون این اعداد دارای ارزش‌های اعشاری هستند، می‌توانیم نوع float32 را استفاده کنیم.\n",
    "\n",
    "بدیل ستون‌های رشته‌ای (object) به دسته‌ای (category):\n",
    "این کار باعث کاهش حجم حافظه مصرفی و بهبود عملکرد می‌شود.\n",
    "\n",
    "مدیریت مقادیر گم شده: برای ستون Checkout Number که مقادیر گم شده داره، می‌تونیم از روش‌های مختلفی مثل پر کردن با میانگین، میانه، یا حذف ردیف‌ها استفاده کنیم.\n",
    "\n",
    "تبدیل ستون Revenue به نوع عددی."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "213d3c53",
   "metadata": {
    "papermill": {
     "duration": 0.006864,
     "end_time": "2025-05-04T06:57:48.840812",
     "exception": false,
     "start_time": "2025-05-04T06:57:48.833948",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Section 2: Data Cleaning and Transformation  \n",
    "\n",
    "5. Convert the \"Revenue\" column to a numeric data type.\n",
    "\n",
    "6. Create a new column \"RevToArea\" based on the ratio between \"Revenue\" column and \"AreaStore\" column.\n",
    "\n",
    "7. Set \"Store Number\" column as a lable of rows in data frame.  \n",
    "\n",
    "8. Check for missing values in the dataset and use an **if-else statement** to handle them by filling in the missing values with Median/Mode values of features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e98eaf2f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T06:57:48.857162Z",
     "iopub.status.busy": "2025-05-04T06:57:48.856826Z",
     "iopub.status.idle": "2025-05-04T06:57:48.887240Z",
     "shell.execute_reply": "2025-05-04T06:57:48.886102Z"
    },
    "papermill": {
     "duration": 0.041742,
     "end_time": "2025-05-04T06:57:48.889554",
     "exception": false,
     "start_time": "2025-05-04T06:57:48.847812",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store Number</th>\n",
       "      <th>AreaStore</th>\n",
       "      <th>Property</th>\n",
       "      <th>Type</th>\n",
       "      <th>Old/New</th>\n",
       "      <th>Checkout Number</th>\n",
       "      <th>Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2100.0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>Hyper</td>\n",
       "      <td>New</td>\n",
       "      <td>6.0</td>\n",
       "      <td>45,072,000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1290.0</td>\n",
       "      <td>Cooperate</td>\n",
       "      <td>Extra</td>\n",
       "      <td>New</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7,416,000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>500.0</td>\n",
       "      <td>Rental</td>\n",
       "      <td>Express</td>\n",
       "      <td>New</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8,592,000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>Hyper</td>\n",
       "      <td>New</td>\n",
       "      <td>9.0</td>\n",
       "      <td>48,415,500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>220.0</td>\n",
       "      <td>Rental</td>\n",
       "      <td>Express</td>\n",
       "      <td>Old</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3,345,500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>114</td>\n",
       "      <td>1800.0</td>\n",
       "      <td>Rental/Cooperate</td>\n",
       "      <td>Extra</td>\n",
       "      <td>New</td>\n",
       "      <td>9.0</td>\n",
       "      <td>13,471,000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>115</td>\n",
       "      <td>1700.0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>Extra</td>\n",
       "      <td>New</td>\n",
       "      <td>6.0</td>\n",
       "      <td>29,974,500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>116</td>\n",
       "      <td>500.0</td>\n",
       "      <td>Rental/Cooperate</td>\n",
       "      <td>Express</td>\n",
       "      <td>New</td>\n",
       "      <td>2.0</td>\n",
       "      <td>11,031,500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>117</td>\n",
       "      <td>200.0</td>\n",
       "      <td>Rental/Cooperate</td>\n",
       "      <td>Express</td>\n",
       "      <td>New</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6,173,500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>118</td>\n",
       "      <td>420.0</td>\n",
       "      <td>Cooperate</td>\n",
       "      <td>Express</td>\n",
       "      <td>Old</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10,643,000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>118 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Store Number  AreaStore          Property     Type Old/New  \\\n",
       "0               1     2100.0             Owned    Hyper     New   \n",
       "1               2     1290.0         Cooperate    Extra     New   \n",
       "2               3      500.0            Rental  Express     New   \n",
       "3               4     2000.0             Owned    Hyper     New   \n",
       "4               5      220.0            Rental  Express     Old   \n",
       "..            ...        ...               ...      ...     ...   \n",
       "113           114     1800.0  Rental/Cooperate    Extra     New   \n",
       "114           115     1700.0            Owned     Extra     New   \n",
       "115           116      500.0  Rental/Cooperate  Express     New   \n",
       "116           117      200.0  Rental/Cooperate  Express     New   \n",
       "117           118      420.0         Cooperate  Express    Old    \n",
       "\n",
       "     Checkout Number     Revenue  \n",
       "0                6.0  45,072,000  \n",
       "1                5.0   7,416,000  \n",
       "2                NaN   8,592,000  \n",
       "3                9.0  48,415,500  \n",
       "4                2.0   3,345,500  \n",
       "..               ...         ...  \n",
       "113              9.0  13,471,000  \n",
       "114              6.0  29,974,500  \n",
       "115              2.0  11,031,500  \n",
       "116              2.0   6,173,500  \n",
       "117              3.0  10,643,000  \n",
       "\n",
       "[118 rows x 7 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# تبدیل ستون Store Number به int16\n",
    "df['Store Number'] = df['Store Number'].astype('int16')\n",
    "\n",
    "# تبدیل ستون‌های AreaStore و Checkout Number به float32\n",
    "df['AreaStore'] = df['AreaStore'].astype('float32')\n",
    "df['Checkout Number'] = df['Checkout Number'].astype('float32')\n",
    "\n",
    "# تبدیل ستون‌های Property, Type, Old/New به category\n",
    "df['Property'] = df['Property'].astype('category')\n",
    "df['Type'] = df['Type'].astype('category')\n",
    "df['Old/New'] = df['Old/New'].astype('category')\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "facd6c07",
   "metadata": {
    "papermill": {
     "duration": 0.007385,
     "end_time": "2025-05-04T06:57:48.905915",
     "exception": false,
     "start_time": "2025-05-04T06:57:48.898530",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "📋 چه سوالات تحلیلی میشه از این جدول پرسید؟\n",
    "آیا فروشگاه‌های بزرگ‌تر درآمد بیشتری دارند؟\n",
    "\n",
    "* آیا فروشگاه‌های Owned نسبت به Rental درآمد بیشتری دارن؟\n",
    "\n",
    "* فروشگاه‌های \"New\" بهتر کار می‌کنند یا \"Old\"؟\n",
    "\n",
    "* نسبت درآمد به تعداد صندوق چقدره؟\n",
    "\n",
    "* مدل پیش‌بینی درآمد فروشگاه چطور میتونه باشه؟"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ebc4dca4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T06:57:48.923672Z",
     "iopub.status.busy": "2025-05-04T06:57:48.923278Z",
     "iopub.status.idle": "2025-05-04T06:57:48.943520Z",
     "shell.execute_reply": "2025-05-04T06:57:48.942300Z"
    },
    "papermill": {
     "duration": 0.031918,
     "end_time": "2025-05-04T06:57:48.945719",
     "exception": false,
     "start_time": "2025-05-04T06:57:48.913801",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store Number</th>\n",
       "      <th>AreaStore</th>\n",
       "      <th>Property</th>\n",
       "      <th>Type</th>\n",
       "      <th>Old/New</th>\n",
       "      <th>Checkout Number</th>\n",
       "      <th>Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2100.0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>Hyper</td>\n",
       "      <td>New</td>\n",
       "      <td>6.0</td>\n",
       "      <td>45072000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1290.0</td>\n",
       "      <td>Cooperate</td>\n",
       "      <td>Extra</td>\n",
       "      <td>New</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7416000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>500.0</td>\n",
       "      <td>Rental</td>\n",
       "      <td>Express</td>\n",
       "      <td>New</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8592000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>Hyper</td>\n",
       "      <td>New</td>\n",
       "      <td>9.0</td>\n",
       "      <td>48415500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>220.0</td>\n",
       "      <td>Rental</td>\n",
       "      <td>Express</td>\n",
       "      <td>Old</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3345500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>114</td>\n",
       "      <td>1800.0</td>\n",
       "      <td>Rental/Cooperate</td>\n",
       "      <td>Extra</td>\n",
       "      <td>New</td>\n",
       "      <td>9.0</td>\n",
       "      <td>13471000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>115</td>\n",
       "      <td>1700.0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>Extra</td>\n",
       "      <td>New</td>\n",
       "      <td>6.0</td>\n",
       "      <td>29974500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>116</td>\n",
       "      <td>500.0</td>\n",
       "      <td>Rental/Cooperate</td>\n",
       "      <td>Express</td>\n",
       "      <td>New</td>\n",
       "      <td>2.0</td>\n",
       "      <td>11031500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>117</td>\n",
       "      <td>200.0</td>\n",
       "      <td>Rental/Cooperate</td>\n",
       "      <td>Express</td>\n",
       "      <td>New</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6173500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>118</td>\n",
       "      <td>420.0</td>\n",
       "      <td>Cooperate</td>\n",
       "      <td>Express</td>\n",
       "      <td>Old</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10643000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>118 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Store Number  AreaStore          Property     Type Old/New  \\\n",
       "0               1     2100.0             Owned    Hyper     New   \n",
       "1               2     1290.0         Cooperate    Extra     New   \n",
       "2               3      500.0            Rental  Express     New   \n",
       "3               4     2000.0             Owned    Hyper     New   \n",
       "4               5      220.0            Rental  Express     Old   \n",
       "..            ...        ...               ...      ...     ...   \n",
       "113           114     1800.0  Rental/Cooperate    Extra     New   \n",
       "114           115     1700.0            Owned     Extra     New   \n",
       "115           116      500.0  Rental/Cooperate  Express     New   \n",
       "116           117      200.0  Rental/Cooperate  Express     New   \n",
       "117           118      420.0         Cooperate  Express    Old    \n",
       "\n",
       "     Checkout Number     Revenue  \n",
       "0                6.0  45072000.0  \n",
       "1                5.0   7416000.0  \n",
       "2                NaN   8592000.0  \n",
       "3                9.0  48415500.0  \n",
       "4                2.0   3345500.0  \n",
       "..               ...         ...  \n",
       "113              9.0  13471000.0  \n",
       "114              6.0  29974500.0  \n",
       "115              2.0  11031500.0  \n",
       "116              2.0   6173500.0  \n",
       "117              3.0  10643000.0  \n",
       "\n",
       "[118 rows x 7 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# حذف کاما و تبدیل به عددی\n",
    "df['Revenue'] = df['Revenue'].str.replace(',', '').astype(float)\n",
    "# ستون درامد را به یک ستون عددی تبدیل می کنه\n",
    "df['Revenue'] = pd.to_numeric(df['Revenue'], errors='coerce')\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d5936e5",
   "metadata": {
    "papermill": {
     "duration": 0.007852,
     "end_time": "2025-05-04T06:57:48.961568",
     "exception": false,
     "start_time": "2025-05-04T06:57:48.953716",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "🎯 چرا این کار مهمه؟\n",
    "\n",
    "چون توی تحلیل داده و مخصوصاً مدلسازی (مثل رگرسیون خطی یا مدل‌های یادگیری ماشین)،\n",
    "➔ مدل‌ها فقط با مقادیر عددی کار می‌کنن.\n",
    "اگر ستون‌های عددی‌ات متن باشن، هیچ الگوریتمی نمی‌تونه درست روی اون کار کنه."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a137e13",
   "metadata": {
    "papermill": {
     "duration": 0.007508,
     "end_time": "2025-05-04T06:57:48.976861",
     "exception": false,
     "start_time": "2025-05-04T06:57:48.969353",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "📊 در مورد دیتای تو:\n",
    "حالا ستون 'Revenue' آمادست که:\n",
    "\n",
    "* تحلیل آماری انجام بدی\n",
    "\n",
    "* روابط بین درآمد و سایر ویژگی‌ها رو مدل کنی\n",
    "\n",
    "* پیش‌بینی کنی که درآمد یک فروشگاه جدید چقدر میشه\n",
    "\n",
    "* یا حتی دیتای پرت (outlier) رو کشف کنی\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "13b2c446",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T06:57:48.994866Z",
     "iopub.status.busy": "2025-05-04T06:57:48.994442Z",
     "iopub.status.idle": "2025-05-04T06:57:49.014803Z",
     "shell.execute_reply": "2025-05-04T06:57:49.013728Z"
    },
    "papermill": {
     "duration": 0.031784,
     "end_time": "2025-05-04T06:57:49.017203",
     "exception": false,
     "start_time": "2025-05-04T06:57:48.985419",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Store Number</th>\n",
       "      <th>AreaStore</th>\n",
       "      <th>Property</th>\n",
       "      <th>Type</th>\n",
       "      <th>Old/New</th>\n",
       "      <th>Checkout Number</th>\n",
       "      <th>Revenue</th>\n",
       "      <th>RevToArea</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2100.0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>Hyper</td>\n",
       "      <td>New</td>\n",
       "      <td>6.0</td>\n",
       "      <td>45072000.0</td>\n",
       "      <td>21462.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1290.0</td>\n",
       "      <td>Cooperate</td>\n",
       "      <td>Extra</td>\n",
       "      <td>New</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7416000.0</td>\n",
       "      <td>5748.837209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>500.0</td>\n",
       "      <td>Rental</td>\n",
       "      <td>Express</td>\n",
       "      <td>New</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8592000.0</td>\n",
       "      <td>17184.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>Hyper</td>\n",
       "      <td>New</td>\n",
       "      <td>9.0</td>\n",
       "      <td>48415500.0</td>\n",
       "      <td>24207.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>220.0</td>\n",
       "      <td>Rental</td>\n",
       "      <td>Express</td>\n",
       "      <td>Old</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3345500.0</td>\n",
       "      <td>15206.818182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>114</td>\n",
       "      <td>1800.0</td>\n",
       "      <td>Rental/Cooperate</td>\n",
       "      <td>Extra</td>\n",
       "      <td>New</td>\n",
       "      <td>9.0</td>\n",
       "      <td>13471000.0</td>\n",
       "      <td>7483.888889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>115</td>\n",
       "      <td>1700.0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>Extra</td>\n",
       "      <td>New</td>\n",
       "      <td>6.0</td>\n",
       "      <td>29974500.0</td>\n",
       "      <td>17632.058824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>116</td>\n",
       "      <td>500.0</td>\n",
       "      <td>Rental/Cooperate</td>\n",
       "      <td>Express</td>\n",
       "      <td>New</td>\n",
       "      <td>2.0</td>\n",
       "      <td>11031500.0</td>\n",
       "      <td>22063.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>117</td>\n",
       "      <td>200.0</td>\n",
       "      <td>Rental/Cooperate</td>\n",
       "      <td>Express</td>\n",
       "      <td>New</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6173500.0</td>\n",
       "      <td>30867.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>118</td>\n",
       "      <td>420.0</td>\n",
       "      <td>Cooperate</td>\n",
       "      <td>Express</td>\n",
       "      <td>Old</td>\n",
       "      <td>3.0</td>\n",
       "      <td>10643000.0</td>\n",
       "      <td>25340.476190</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>118 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Store Number  AreaStore          Property     Type Old/New  \\\n",
       "0               1     2100.0             Owned    Hyper     New   \n",
       "1               2     1290.0         Cooperate    Extra     New   \n",
       "2               3      500.0            Rental  Express     New   \n",
       "3               4     2000.0             Owned    Hyper     New   \n",
       "4               5      220.0            Rental  Express     Old   \n",
       "..            ...        ...               ...      ...     ...   \n",
       "113           114     1800.0  Rental/Cooperate    Extra     New   \n",
       "114           115     1700.0            Owned     Extra     New   \n",
       "115           116      500.0  Rental/Cooperate  Express     New   \n",
       "116           117      200.0  Rental/Cooperate  Express     New   \n",
       "117           118      420.0         Cooperate  Express    Old    \n",
       "\n",
       "     Checkout Number     Revenue     RevToArea  \n",
       "0                6.0  45072000.0  21462.857143  \n",
       "1                5.0   7416000.0   5748.837209  \n",
       "2                NaN   8592000.0  17184.000000  \n",
       "3                9.0  48415500.0  24207.750000  \n",
       "4                2.0   3345500.0  15206.818182  \n",
       "..               ...         ...           ...  \n",
       "113              9.0  13471000.0   7483.888889  \n",
       "114              6.0  29974500.0  17632.058824  \n",
       "115              2.0  11031500.0  22063.000000  \n",
       "116              2.0   6173500.0  30867.500000  \n",
       "117              3.0  10643000.0  25340.476190  \n",
       "\n",
       "[118 rows x 8 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#یک ستون جدید می سازه و نسبت  ستونRevenue وAreaStore  را بهمون رد ستون جدید نشون میده\n",
    "df['RevToArea'] = df['Revenue'] / df['AreaStore']\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ed49e63",
   "metadata": {
    "papermill": {
     "duration": 0.007821,
     "end_time": "2025-05-04T06:57:49.033048",
     "exception": false,
     "start_time": "2025-05-04T06:57:49.025227",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "خروجی جدید شما دارای یک ستون اضافی به نام RevToArea است که نسبت درآمد هر فروشگاه به مساحت آن فروشگاه را نشان می‌دهد. این ستون به ما کمک می‌کند تا بفهمیم هر فروشگاه در ازای هر متر مربع از مساحت خود، چقدر درآمد دارد."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "610583de",
   "metadata": {
    "papermill": {
     "duration": 0.007643,
     "end_time": "2025-05-04T06:57:49.049487",
     "exception": false,
     "start_time": "2025-05-04T06:57:49.041844",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "RevToArea: نسبت درآمد به مساحت است. این عدد نشان می‌دهد که هر فروشگاه به ازای هر متر مربع، چه مقدار درآمد تولید کرده است. برای مثال:\n",
    "\n",
    "فروشگاه شماره 1 با مساحت 2100 متر مربع، درآمد 45,072,000 داشته و نسبت درآمد به مساحت آن 21,462.86 تومان برای هر متر مربع است .\n",
    "\n",
    "فروشگاه شماره 2 با مساحت 1290 متر مربع، درآمد 7,416,000 داشته و نسبت درآمد به مساحت آن 5,748.84 تومان برای هر متر مربع است ."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f24d92a",
   "metadata": {
    "papermill": {
     "duration": 0.007528,
     "end_time": "2025-05-04T06:57:49.064957",
     "exception": false,
     "start_time": "2025-05-04T06:57:49.057429",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "نکات کلیدی:\n",
    "\n",
    "فروشگاه‌هایی که نسبت بالاتری از درآمد به مساحت دارند، ممکن است به دلیل وجود کالاها یا خدمات پرفروش‌تر در آن فروشگاه‌ها باشند. این فروشگاه‌ها می‌توانند فضای کمتری اشغال کرده ولی درآمد بیشتری کسب کنند.\n",
    "\n",
    "\n",
    "فروشگاه‌هایی با نسبت پایین‌تر ممکن است مساحت زیادی داشته باشند ولی به ازای هر متر مربع، درآمد کمتری داشته باشند. این می‌تواند به دلیل فضای خالی، موجودی ناکافی کالا یا مشکلات در بازاریابی باشد.\n",
    "\n",
    "\n",
    "به طور کلی، ستون RevToArea می‌تواند به مدیران و تحلیلگران کمک کند تا عملکرد فروشگاه‌ها را با توجه به مساحت فروشگاه‌ها مقایسه کنند و مناطقی که نیاز به بهبود دارند را شناسایی کنند."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bd11cdee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T06:57:49.082270Z",
     "iopub.status.busy": "2025-05-04T06:57:49.081917Z",
     "iopub.status.idle": "2025-05-04T06:57:49.098728Z",
     "shell.execute_reply": "2025-05-04T06:57:49.097484Z"
    },
    "papermill": {
     "duration": 0.028725,
     "end_time": "2025-05-04T06:57:49.101409",
     "exception": false,
     "start_time": "2025-05-04T06:57:49.072684",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AreaStore</th>\n",
       "      <th>Property</th>\n",
       "      <th>Type</th>\n",
       "      <th>Old/New</th>\n",
       "      <th>Checkout Number</th>\n",
       "      <th>Revenue</th>\n",
       "      <th>RevToArea</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Store Number</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2100.0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>Hyper</td>\n",
       "      <td>New</td>\n",
       "      <td>6.0</td>\n",
       "      <td>45072000.0</td>\n",
       "      <td>21462.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1290.0</td>\n",
       "      <td>Cooperate</td>\n",
       "      <td>Extra</td>\n",
       "      <td>New</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7416000.0</td>\n",
       "      <td>5748.837209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>500.0</td>\n",
       "      <td>Rental</td>\n",
       "      <td>Express</td>\n",
       "      <td>New</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8592000.0</td>\n",
       "      <td>17184.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>Hyper</td>\n",
       "      <td>New</td>\n",
       "      <td>9.0</td>\n",
       "      <td>48415500.0</td>\n",
       "      <td>24207.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>220.0</td>\n",
       "      <td>Rental</td>\n",
       "      <td>Express</td>\n",
       "      <td>Old</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3345500.0</td>\n",
       "      <td>15206.818182</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              AreaStore   Property     Type Old/New  Checkout Number  \\\n",
       "Store Number                                                           \n",
       "1                2100.0      Owned    Hyper     New              6.0   \n",
       "2                1290.0  Cooperate    Extra     New              5.0   \n",
       "3                 500.0     Rental  Express     New              NaN   \n",
       "4                2000.0      Owned    Hyper     New              9.0   \n",
       "5                 220.0     Rental  Express     Old              2.0   \n",
       "\n",
       "                 Revenue     RevToArea  \n",
       "Store Number                            \n",
       "1             45072000.0  21462.857143  \n",
       "2              7416000.0   5748.837209  \n",
       "3              8592000.0  17184.000000  \n",
       "4             48415500.0  24207.750000  \n",
       "5              3345500.0  15206.818182  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.set_index('Store Number', inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b59f040",
   "metadata": {
    "papermill": {
     "duration": 0.00832,
     "end_time": "2025-05-04T06:57:49.117927",
     "exception": false,
     "start_time": "2025-05-04T06:57:49.109607",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "📌 نکات تحلیلی مهم:\n",
    "ایندکس‌شدن Store Number:\n",
    "\n",
    "مقدار گمشده (NaN) در ستون Checkout Number برای فروشگاه ۳:\n",
    "\n",
    "نشان می‌دهد داده ناقص داریم. برای تحلیل دقیق‌تر باید آن را مدیریت کنیم (مثلاً با میانگین جایگزین کنیم یا حذفش کنیم)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1ef72bdb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T06:57:49.135953Z",
     "iopub.status.busy": "2025-05-04T06:57:49.135589Z",
     "iopub.status.idle": "2025-05-04T06:57:49.154361Z",
     "shell.execute_reply": "2025-05-04T06:57:49.153284Z"
    },
    "papermill": {
     "duration": 0.030275,
     "end_time": "2025-05-04T06:57:49.156685",
     "exception": false,
     "start_time": "2025-05-04T06:57:49.126410",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AreaStore</th>\n",
       "      <th>Property</th>\n",
       "      <th>Type</th>\n",
       "      <th>Old/New</th>\n",
       "      <th>Checkout Number</th>\n",
       "      <th>Revenue</th>\n",
       "      <th>RevToArea</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Store Number</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2100.0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>Hyper</td>\n",
       "      <td>New</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>45072000.0</td>\n",
       "      <td>21462.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1290.0</td>\n",
       "      <td>Cooperate</td>\n",
       "      <td>Extra</td>\n",
       "      <td>New</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>7416000.0</td>\n",
       "      <td>5748.837209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>500.0</td>\n",
       "      <td>Rental</td>\n",
       "      <td>Express</td>\n",
       "      <td>New</td>\n",
       "      <td>4.792453</td>\n",
       "      <td>8592000.0</td>\n",
       "      <td>17184.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2000.0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>Hyper</td>\n",
       "      <td>New</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>48415500.0</td>\n",
       "      <td>24207.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>220.0</td>\n",
       "      <td>Rental</td>\n",
       "      <td>Express</td>\n",
       "      <td>Old</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3345500.0</td>\n",
       "      <td>15206.818182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>1800.0</td>\n",
       "      <td>Rental/Cooperate</td>\n",
       "      <td>Extra</td>\n",
       "      <td>New</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>13471000.0</td>\n",
       "      <td>7483.888889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>1700.0</td>\n",
       "      <td>Owned</td>\n",
       "      <td>Extra</td>\n",
       "      <td>New</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>29974500.0</td>\n",
       "      <td>17632.058824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>500.0</td>\n",
       "      <td>Rental/Cooperate</td>\n",
       "      <td>Express</td>\n",
       "      <td>New</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>11031500.0</td>\n",
       "      <td>22063.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>200.0</td>\n",
       "      <td>Rental/Cooperate</td>\n",
       "      <td>Express</td>\n",
       "      <td>New</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>6173500.0</td>\n",
       "      <td>30867.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>118</th>\n",
       "      <td>420.0</td>\n",
       "      <td>Cooperate</td>\n",
       "      <td>Express</td>\n",
       "      <td>Old</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>10643000.0</td>\n",
       "      <td>25340.476190</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>118 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              AreaStore          Property     Type Old/New  Checkout Number  \\\n",
       "Store Number                                                                  \n",
       "1                2100.0             Owned    Hyper     New         6.000000   \n",
       "2                1290.0         Cooperate    Extra     New         5.000000   \n",
       "3                 500.0            Rental  Express     New         4.792453   \n",
       "4                2000.0             Owned    Hyper     New         9.000000   \n",
       "5                 220.0            Rental  Express     Old         2.000000   \n",
       "...                 ...               ...      ...     ...              ...   \n",
       "114              1800.0  Rental/Cooperate    Extra     New         9.000000   \n",
       "115              1700.0            Owned     Extra     New         6.000000   \n",
       "116               500.0  Rental/Cooperate  Express     New         2.000000   \n",
       "117               200.0  Rental/Cooperate  Express     New         2.000000   \n",
       "118               420.0         Cooperate  Express    Old          3.000000   \n",
       "\n",
       "                 Revenue     RevToArea  \n",
       "Store Number                            \n",
       "1             45072000.0  21462.857143  \n",
       "2              7416000.0   5748.837209  \n",
       "3              8592000.0  17184.000000  \n",
       "4             48415500.0  24207.750000  \n",
       "5              3345500.0  15206.818182  \n",
       "...                  ...           ...  \n",
       "114           13471000.0   7483.888889  \n",
       "115           29974500.0  17632.058824  \n",
       "116           11031500.0  22063.000000  \n",
       "117            6173500.0  30867.500000  \n",
       "118           10643000.0  25340.476190  \n",
       "\n",
       "[118 rows x 7 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#پر کردن مقادیر خالی این ستون با میانگین\n",
    "df['Checkout Number'] = df['Checkout Number'].fillna(df['Checkout Number'].mean())\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d59e84f",
   "metadata": {
    "papermill": {
     "duration": 0.008464,
     "end_time": "2025-05-04T06:57:49.173649",
     "exception": false,
     "start_time": "2025-05-04T06:57:49.165185",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "1_درمان داده گمشده (Missing Value Imputation):\n",
    "\n",
    "* با جایگزینی مقدار میانگین به‌جای NaN، شما داده‌ی ناقص را به شکل عددی معتبر پر کردید\n",
    "\n",
    "* این روش نسبت به حذف کامل ردیف، بهتر است، چون داده را نگه می‌دارد"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1380fd2",
   "metadata": {
    "papermill": {
     "duration": 0.008071,
     "end_time": "2025-05-04T06:57:49.190430",
     "exception": false,
     "start_time": "2025-05-04T06:57:49.182359",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "2_تأثیر بر تحلیل‌های آینده:\n",
    "\n",
    "* حالا که ستون کامل شده، می‌توانید تحلیل‌های آماری، گراف‌ها و مدل‌سازی را بدون خطای NaN انجام دهید."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebfafd8a",
   "metadata": {
    "papermill": {
     "duration": 0.008431,
     "end_time": "2025-05-04T06:57:49.207100",
     "exception": false,
     "start_time": "2025-05-04T06:57:49.198669",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Section 3: Data Visualization  \n",
    "\n",
    "9. Create a bar chart showing the distribution of store \"Type\" with matplotlib.\n",
    "\n",
    "10. Generate a histogram of store \"Revenue\" with seaborn."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be806d23",
   "metadata": {
    "papermill": {
     "duration": 0.00788,
     "end_time": "2025-05-04T06:57:49.223318",
     "exception": false,
     "start_time": "2025-05-04T06:57:49.215438",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "بخش 3: تجسم داده ها\n",
    "\n",
    "یک نمودار میله ای ایجاد کنید که توزیع فروشگاه \"Type\" را با matplotlib نشان می دهد.\n",
    "\n",
    "یک هیستوگرام از فروشگاه \"درآمد\" با seaborn ایجاد کنید."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f014855c",
   "metadata": {
    "papermill": {
     "duration": 0.008136,
     "end_time": "2025-05-04T06:57:49.239898",
     "exception": false,
     "start_time": "2025-05-04T06:57:49.231762",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d2b1185a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T06:57:49.258055Z",
     "iopub.status.busy": "2025-05-04T06:57:49.257727Z",
     "iopub.status.idle": "2025-05-04T06:57:49.499397Z",
     "shell.execute_reply": "2025-05-04T06:57:49.498060Z"
    },
    "papermill": {
     "duration": 0.253962,
     "end_time": "2025-05-04T06:57:49.502118",
     "exception": false,
     "start_time": "2025-05-04T06:57:49.248156",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# محاسبه تعداد هر نوع فروشگاه\n",
    "type_counts = df['Type'].value_counts()\n",
    "\n",
    "# رسم نمودار میله‌ای\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.bar(type_counts.index, type_counts.values, color='skyblue')\n",
    "\n",
    "# عنوان و برچسب‌ها\n",
    "plt.title('Distribution of types of stores (Store Type)', fontsize=14)\n",
    "plt.xlabel('Type of stores', fontsize=12)\n",
    "plt.ylabel('number', fontsize=12)\n",
    "\n",
    "# نمایش نمودار\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3817d0b",
   "metadata": {
    "papermill": {
     "duration": 0.008627,
     "end_time": "2025-05-04T06:57:49.519764",
     "exception": false,
     "start_time": "2025-05-04T06:57:49.511137",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "این نمودار نشان می‌دهد که:\n",
    "\n",
    "فروشگاه‌های Express بیشترین تعداد را دارند.\n",
    "\n",
    "فروشگاه‌های Extra در رتبه دوم قرار دارند.\n",
    "\n",
    "فروشگاه‌های Hyper کمترین تعداد را دارند."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1fbd3cd0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T06:57:49.539922Z",
     "iopub.status.busy": "2025-05-04T06:57:49.539544Z",
     "iopub.status.idle": "2025-05-04T06:57:51.751345Z",
     "shell.execute_reply": "2025-05-04T06:57:51.750126Z"
    },
    "papermill": {
     "duration": 2.224854,
     "end_time": "2025-05-04T06:57:51.753774",
     "exception": false,
     "start_time": "2025-05-04T06:57:49.528920",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# رسم هیستوگرام درآمد فروشگاه‌ها\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.histplot(data=df, x='Revenue', bins=20, kde=True, color='green')\n",
    "\n",
    "# عنوان و برچسب‌ها\n",
    "plt.title('Distribution of store income (Revenue)', fontsize=14)\n",
    "plt.xlabel('income', fontsize=12)\n",
    "plt.ylabel('Number of stores', fontsize=12)\n",
    "\n",
    "# نمایش نمودار\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3565e78",
   "metadata": {
    "papermill": {
     "duration": 0.009337,
     "end_time": "2025-05-04T06:57:51.773541",
     "exception": false,
     "start_time": "2025-05-04T06:57:51.764204",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* عنوان: توزیع درآمد فروشگاه‌ها\n",
    "\n",
    "* محور X: درآمد (Revenue)\n",
    "\n",
    "* محور Y: فراوانی (Frequency)\n",
    "\n",
    "* هیستوگرام: بیشتر فروشگاه‌ها دارای درآمد پایین‌تری هستند، و فراوانی با افزایش درآمد کاهش می‌یابد.\n",
    "\n",
    "* توزیع skewed راست: نشان می‌دهد که تعداد کمی از فروشگاه‌ها دارای درآمد بسیار بالایی هستند."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90f98e39",
   "metadata": {
    "papermill": {
     "duration": 0.009695,
     "end_time": "2025-05-04T06:57:51.793054",
     "exception": false,
     "start_time": "2025-05-04T06:57:51.783359",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Section 4: Data Analysis  \n",
    "\n",
    "12. Compare \"AreaStore\" values for \"Store Numbers\" 5 and 117, and print which one is greater than. *(hint: uisng .loc)*\n",
    "\n",
    "13. Write a **function** to get \"Store Numbers\" and numeric features name, then compare values and print which one is greater than.\n",
    "\n",
    "15. Determine the most common \"Property\" type among the stores.   \n",
    "\n",
    "14. Identify the store with the highest \"Revenue\" per square meter of \"AreaStore\".  \n",
    "\n",
    "16. Write a **function** to find and return the top N stores with the highest \"Revenue\" in number K stores. Allow the user to specify the number N and K as an argument. (N <= K)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c0cc3637",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T06:57:51.816306Z",
     "iopub.status.busy": "2025-05-04T06:57:51.815846Z",
     "iopub.status.idle": "2025-05-04T06:57:51.825577Z",
     "shell.execute_reply": "2025-05-04T06:57:51.824225Z"
    },
    "papermill": {
     "duration": 0.023587,
     "end_time": "2025-05-04T06:57:51.827885",
     "exception": false,
     "start_time": "2025-05-04T06:57:51.804298",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Store Number 5 has a greater AreaStore: 220.0\n",
      "==================================================\n"
     ]
    }
   ],
   "source": [
    "# مقایسه مقادیر AreaStore برای Store Numbers 5 و 117\n",
    "\n",
    "area_store_5 = df.loc[5, 'AreaStore']\n",
    "area_store_117 = df.loc[117, 'AreaStore']\n",
    "\n",
    "if area_store_5 > area_store_117:\n",
    "    print('Store Number 5 has a greater AreaStore:', area_store_5)\n",
    "else:\n",
    "    print('Store Number 117 has a greater AreaStore:', area_store_117)\n",
    "\n",
    "print(50 * \"=\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4515d954",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T06:57:51.853440Z",
     "iopub.status.busy": "2025-05-04T06:57:51.853054Z",
     "iopub.status.idle": "2025-05-04T06:57:51.861692Z",
     "shell.execute_reply": "2025-05-04T06:57:51.860280Z"
    },
    "papermill": {
     "duration": 0.025146,
     "end_time": "2025-05-04T06:57:51.864568",
     "exception": false,
     "start_time": "2025-05-04T06:57:51.839422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "amount 'AreaStore' for the store 5: 220.0\n",
      "amount 'AreaStore' for the store 117: 200.0\n",
      "➔ store 5 Much more in the feature 'AreaStore' has.\n"
     ]
    }
   ],
   "source": [
    "def compare_numeric_feature(df, store_num1, store_num2, feature_name):\n",
    "    try:\n",
    "        # دریافت مقدار ویژگی برای هر فروشگاه\n",
    "        value1 = df.loc[store_num1, feature_name]\n",
    "        value2 = df.loc[store_num2, feature_name]\n",
    "        \n",
    "        # چاپ مقدار هر فروشگاه\n",
    "        print(f\"amount '{feature_name}' for the store {store_num1}: {value1}\")\n",
    "        print(f\"amount '{feature_name}' for the store {store_num2}: {value2}\")\n",
    "        \n",
    "        # مقایسه مقادیر\n",
    "        if value1 > value2:\n",
    "            print(f\"➔ store {store_num1} Much more in the feature '{feature_name}' has.\")\n",
    "        elif value1 < value2:\n",
    "            print(f\"➔ store {store_num2} Much more in the feature '{feature_name}' has.\")\n",
    "        else:\n",
    "            print(f\"➔ attribute value '{feature_name}' It is the same in both stores..\")\n",
    "    \n",
    "    except KeyError as e:\n",
    "        print(f\"Error: The entered column or store number does not exist! ({e})\")\n",
    "\n",
    "\n",
    "compare_numeric_feature(df, 5, 117, 'AreaStore')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "80c3dd13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T06:57:51.887160Z",
     "iopub.status.busy": "2025-05-04T06:57:51.886797Z",
     "iopub.status.idle": "2025-05-04T06:57:51.895681Z",
     "shell.execute_reply": "2025-05-04T06:57:51.894377Z"
    },
    "papermill": {
     "duration": 0.023121,
     "end_time": "2025-05-04T06:57:51.898242",
     "exception": false,
     "start_time": "2025-05-04T06:57:51.875121",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The most common type of property among stores: Owned with the number 39 store\n"
     ]
    }
   ],
   "source": [
    "# شمارش تعداد هر نوع Property\n",
    "property_counts = df['Property'].value_counts()\n",
    "\n",
    "# استخراج رایج‌ترین نوع\n",
    "most_common_property = property_counts.idxmax()\n",
    "most_common_count = property_counts.max()\n",
    "\n",
    "print(f\"The most common type of property among stores: {most_common_property} with the number {most_common_count} store\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ec4d3ad1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T06:57:51.920266Z",
     "iopub.status.busy": "2025-05-04T06:57:51.919871Z",
     "iopub.status.idle": "2025-05-04T06:57:51.927681Z",
     "shell.execute_reply": "2025-05-04T06:57:51.926519Z"
    },
    "papermill": {
     "duration": 0.021563,
     "end_time": "2025-05-04T06:57:51.929988",
     "exception": false,
     "start_time": "2025-05-04T06:57:51.908425",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Store number 53 The highest income per square meter of 'AreaStore' with the amount 110817.07 has.\n"
     ]
    }
   ],
   "source": [
    "# محاسبه نسبت درآمد به مساحت برای هر فروشگاه\n",
    "df['RevenuePerArea'] = df['Revenue'] / df['AreaStore']\n",
    "\n",
    "# پیدا کردن ایندکس فروشگاهی که بیشترین مقدار را دارد\n",
    "store_with_highest_revenue_per_area = df['RevenuePerArea'].idxmax()\n",
    "\n",
    "# استخراج شماره فروشگاه از ایندکس\n",
    "store_number = store_with_highest_revenue_per_area\n",
    "\n",
    "# استخراج مقدار بیشترین درآمد به ازای مساحت\n",
    "highest_revenue_per_area = df.loc[store_number, 'RevenuePerArea']\n",
    "\n",
    "print(f\"Store number {store_number} The highest income per square meter of 'AreaStore' with the amount {highest_revenue_per_area:.2f} has.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "773b8225",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T06:57:51.951771Z",
     "iopub.status.busy": "2025-05-04T06:57:51.951350Z",
     "iopub.status.idle": "2025-05-04T06:57:51.966841Z",
     "shell.execute_reply": "2025-05-04T06:57:51.965399Z"
    },
    "papermill": {
     "duration": 0.029438,
     "end_time": "2025-05-04T06:57:51.969491",
     "exception": false,
     "start_time": "2025-05-04T06:57:51.940053",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              AreaStore          Property   Type Old/New  Checkout Number  \\\n",
      "Store Number                                                                \n",
      "44               5600.0             Owned  Hyper     New        14.000000   \n",
      "86               2400.0             Owned  Hyper     New        10.000000   \n",
      "33               3000.0             Owned  Hyper     New        11.000000   \n",
      "35               1750.0             Owned  Extra     New         9.000000   \n",
      "46               1800.0  Rental/Cooperate  Extra     New         4.792453   \n",
      "\n",
      "                  Revenue     RevToArea  RevenuePerArea  \n",
      "Store Number                                             \n",
      "44            100083000.0  17871.964286    17871.964286  \n",
      "86             97408000.0  40586.666667    40586.666667  \n",
      "33             77139500.0  25713.166667    25713.166667  \n",
      "35             75874500.0  43356.857143    43356.857143  \n",
      "46             67093000.0  37273.888889    37273.888889  \n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "def top_n_stores_by_revenue(df, N, K):\n",
    "    \"\"\"\n",
    "    Function to find and return the top N stores with the highest 'Revenue' \n",
    "    from the top K stores.\n",
    "    \n",
    "    Parameters:\n",
    "    - df: DataFrame containing the stores data.\n",
    "    - N: The number of top stores to return (N <= K).\n",
    "    - K: The number of stores to consider (K can be more than or equal to N).\n",
    "    \n",
    "    Returns:\n",
    "    - A DataFrame containing the top N stores with the highest 'Revenue'.\n",
    "    \"\"\"\n",
    "    \n",
    "    if N > K:\n",
    "        raise ValueError(\"N must be less than or equal to K.\")\n",
    "    \n",
    "    # Select the top K stores based on 'Revenue'\n",
    "    top_k_stores = df.nlargest(K, 'Revenue')\n",
    "    \n",
    "    # Get the top N stores from the top K stores\n",
    "    top_n_stores = top_k_stores.head(N)\n",
    "    \n",
    "    return top_n_stores\n",
    "\n",
    "# Example of usage\n",
    "# Assuming df is your DataFrame\n",
    "N = 5  # The number of top stores you want to return\n",
    "K = 10  # The number of stores to consider\n",
    "top_stores = top_n_stores_by_revenue(df, N, K)\n",
    "print(top_stores)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df24e087",
   "metadata": {
    "papermill": {
     "duration": 0.009787,
     "end_time": "2025-05-04T06:57:51.989665",
     "exception": false,
     "start_time": "2025-05-04T06:57:51.979878",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Section 5: Bonus Challenge (Advanced) --Optional \n",
    "\n",
    "17. Use Scikit-Learn to perform test and trian split dataset.  \n",
    "\n",
    "18. Use Scikit-Learn to resclale numerical data for modeling. \n",
    "\n",
    "19. Use Scikit-Learn to perform linear regression to predict store \"Revenue\", based on **numerical features**.  \n",
    "\n",
    "20. Use Scikit-Learn to evaluate model with **R square** metric."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a4da7a29",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T06:57:52.012191Z",
     "iopub.status.busy": "2025-05-04T06:57:52.011837Z",
     "iopub.status.idle": "2025-05-04T06:57:52.353615Z",
     "shell.execute_reply": "2025-05-04T06:57:52.352242Z"
    },
    "papermill": {
     "duration": 0.356655,
     "end_time": "2025-05-04T06:57:52.356476",
     "exception": false,
     "start_time": "2025-05-04T06:57:51.999821",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "شکل X_train: (94, 7)\n",
      "شکل X_test: (24, 7)\n",
      "شکل y_train: (94,)\n",
      "شکل y_test: (24,)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# فرض می‌کنیم df دیتافریم شماست\n",
    "\n",
    "# تقسیم ویژگی‌ها (X) و برچسب‌ها (y)\n",
    "# به عنوان مثال فرض کنیم می‌خواهیم 'Revenue' را پیش‌بینی کنیم\n",
    "X = df.drop(columns=['Revenue'])  # همه ستون‌ها به جز Revenue ویژگی‌ها هستند\n",
    "y = df['Revenue']                 # ستون Revenue برچسب ماست\n",
    "\n",
    "# تقسیم داده‌ها به داده‌های آموزش و تست\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# نمایش شکل داده‌ها\n",
    "print(\"شکل X_train:\", X_train.shape)\n",
    "print(\"شکل X_test:\", X_test.shape)\n",
    "print(\"شکل y_train:\", y_train.shape)\n",
    "print(\"شکل y_test:\", y_test.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "044af817",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T06:57:52.378887Z",
     "iopub.status.busy": "2025-05-04T06:57:52.378510Z",
     "iopub.status.idle": "2025-05-04T06:57:52.400608Z",
     "shell.execute_reply": "2025-05-04T06:57:52.399186Z"
    },
    "papermill": {
     "duration": 0.036272,
     "end_time": "2025-05-04T06:57:52.403019",
     "exception": false,
     "start_time": "2025-05-04T06:57:52.366747",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              AreaStore    Property     Type Old/New  Checkout Number  \\\n",
      "Store Number                                                            \n",
      "45                800.0   Cooperate  Express     New         4.000000   \n",
      "13               4800.0  Cooperate     Hyper     New         4.792453   \n",
      "16                488.0      Rental  Express     New         2.000000   \n",
      "71                400.0      Rental  Express     New         2.000000   \n",
      "108               420.0   Cooperate  Express    Old          3.000000   \n",
      "\n",
      "              RevToArea  RevenuePerArea  \n",
      "Store Number                             \n",
      "45            -0.345645       -0.345645  \n",
      "13            -0.700669       -0.700669  \n",
      "16            -0.832849       -0.832849  \n",
      "71             0.561235        0.561235  \n",
      "108            0.241928        0.241928  \n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# فرض می‌کنیم X همان ویژگی‌های عددی ماست\n",
    "# اگر همه ستون‌های X عددی نباشند، باید فقط ستون‌های عددی را انتخاب کنیم\n",
    "numeric_columns = X.select_dtypes(include=['float64', 'int64']).columns\n",
    "\n",
    "# ایجاد یک شی از StandardScaler\n",
    "scaler = StandardScaler()\n",
    "\n",
    "# فیت و ترنسفورم روی داده‌های آموزشی\n",
    "X_train_scaled = X_train.copy()\n",
    "X_train_scaled[numeric_columns] = scaler.fit_transform(X_train[numeric_columns])\n",
    "\n",
    "# فقط ترنسفورم روی داده‌های تست (بدون فیت مجدد)\n",
    "X_test_scaled = X_test.copy()\n",
    "X_test_scaled[numeric_columns] = scaler.transform(X_test[numeric_columns])\n",
    "\n",
    "# مشاهده خروجی\n",
    "print(X_train_scaled.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "df392ff6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T06:57:52.426686Z",
     "iopub.status.busy": "2025-05-04T06:57:52.426266Z",
     "iopub.status.idle": "2025-05-04T06:57:52.564155Z",
     "shell.execute_reply": "2025-05-04T06:57:52.562774Z"
    },
    "papermill": {
     "duration": 0.153086,
     "end_time": "2025-05-04T06:57:52.566941",
     "exception": false,
     "start_time": "2025-05-04T06:57:52.413855",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The model on the test data has R^2 equal to: 0.6262\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# فرض می‌کنیم df دیتافریم اصلی شماست.\n",
    "\n",
    "# --- 1. انتخاب ویژگی‌های عددی\n",
    "numerical_features = ['AreaStore', 'Checkout Number', 'RevToArea', 'RevenuePerArea']\n",
    "\n",
    "X = df[numerical_features]  # ویژگی‌ها (Features)\n",
    "y = df['Revenue']           # هدف (Target)\n",
    "\n",
    "# --- 2. تقسیم داده به داده‌های آموزش و تست\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# --- 3. اعمال استانداردسازی (StandardScaler)\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# --- 4. ساخت و آموزش مدل رگرسیون خطی\n",
    "model = LinearRegression()\n",
    "model.fit(X_train_scaled, y_train)\n",
    "\n",
    "# --- 5. پیش‌بینی روی داده‌های تست\n",
    "y_pred = model.predict(X_test_scaled)\n",
    "\n",
    "# --- 6. ارزیابی مدل (اختیاری - مثلا محاسبه R^2)\n",
    "r2_score = model.score(X_test_scaled, y_test)\n",
    "print(f\"The model on the test data has R^2 equal to: {r2_score:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1b57952a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-05-04T06:57:52.589825Z",
     "iopub.status.busy": "2025-05-04T06:57:52.589451Z",
     "iopub.status.idle": "2025-05-04T06:57:52.600958Z",
     "shell.execute_reply": "2025-05-04T06:57:52.598924Z"
    },
    "papermill": {
     "duration": 0.026027,
     "end_time": "2025-05-04T06:57:52.603631",
     "exception": false,
     "start_time": "2025-05-04T06:57:52.577604",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R square: 0.6261995346119142\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "\n",
    "# ارزیابی مدل با استفاده از متریک R square\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "print('R square:', r2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e3f44ce",
   "metadata": {
    "papermill": {
     "duration": 0.010832,
     "end_time": "2025-05-04T06:57:52.625108",
     "exception": false,
     "start_time": "2025-05-04T06:57:52.614276",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Good luck!"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 3887287,
     "sourceId": 6764170,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 9.202073,
   "end_time": "2025-05-04T06:57:53.257657",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-05-04T06:57:44.055584",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
